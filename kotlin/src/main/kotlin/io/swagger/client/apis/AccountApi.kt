/**
* api.wordnik.com
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 4.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.ApiTokenStatus
import io.swagger.client.models.AuthenticationToken
import io.swagger.client.models.User
import io.swagger.client.models.WordList

import io.swagger.client.infrastructure.*

class AccountApi(basePath: kotlin.String = "https://api.wordnik.com/v4") : ApiClient(basePath) {

    /**
    * Authenticates a User
    * 
    * @param username A confirmed Wordnik username 
    * @param password The user&#39;s password 
    * @return AuthenticationToken
    */
    @Suppress("UNCHECKED_CAST")
    fun authenticate(username: kotlin.String, password: kotlin.String) : AuthenticationToken {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("password" to listOf("$password"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/account.json/authenticate/{username}".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthenticationToken>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthenticationToken
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Authenticates a user
    * 
    * @param username A confirmed Wordnik username 
    * @param body The user&#39;s password 
    * @return AuthenticationToken
    */
    @Suppress("UNCHECKED_CAST")
    fun authenticatePost(username: kotlin.String, body: kotlin.String) : AuthenticationToken {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/account.json/authenticate/{username}".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AuthenticationToken>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AuthenticationToken
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Returns usage statistics for the API account.
    * 
    * @param apiKey Wordnik authentication token (optional)
    * @return ApiTokenStatus
    */
    @Suppress("UNCHECKED_CAST")
    fun getApiTokenStatus(apiKey: kotlin.String) : ApiTokenStatus {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("apiKey" to apiKey)
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/account.json/apiTokenStatus",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<ApiTokenStatus>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ApiTokenStatus
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Returns the logged-in User
    * Requires a valid auth_token to be set.
    * @param authToken The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above) 
    * @return User
    */
    @Suppress("UNCHECKED_CAST")
    fun getLoggedInUser(authToken: kotlin.String) : User {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("authToken" to authToken)
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/account.json/user",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<User>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as User
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Fetches WordList objects for the logged-in user.
    * 
    * @param authToken auth_token of logged-in user 
    * @param skip Results to skip (optional, default to 0)
    * @param limit Maximum number of results to return (optional, default to 50)
    * @return kotlin.Array<WordList>
    */
    @Suppress("UNCHECKED_CAST")
    fun getWordListsForLoggedInUser(authToken: kotlin.String, skip: kotlin.Int, limit: kotlin.Int) : kotlin.Array<WordList> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("skip" to listOf("$skip"), "limit" to listOf("$limit"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("authToken" to authToken)
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/account.json/wordLists",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<WordList>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<WordList>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
