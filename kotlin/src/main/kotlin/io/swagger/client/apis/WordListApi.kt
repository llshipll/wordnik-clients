/**
 * api.wordnik.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.infrastructure.*
import io.swagger.client.models.StringValue
import io.swagger.client.models.WordList
import io.swagger.client.models.WordListWord

class WordListApi(basePath: String = "https://api.wordnik.com/v4") : ApiClient(basePath) {

    /**
     * Adds words to a WordList
     *
     * @param permalink permalink of WordList to user
     * @param authToken The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
     * @param body Array of words to add to WordList (optional)
     * @return void
     */
    fun addWordsToWordList(permalink: String, authToken: String, body: Array<StringValue>) {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: Map<String, String> = mapOf("authToken" to authToken)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/wordList.json/$permalink/words",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Deletes an existing WordList
     *
     * @param permalink ID of WordList to delete
     * @param authToken The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
     * @return void
     */
    fun deleteWordList(permalink: String, authToken: String) {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: Map<String, String> = mapOf("authToken" to authToken)
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/wordList.json/{permalink}".replace("{" + "permalink" + "}", permalink),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Removes words from a WordList
     *
     * @param permalink permalink of WordList to use
     * @param authToken The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
     * @param body Words to remove from WordList (optional)
     * @return void
     */
    fun deleteWordsFromWordList(permalink: String, authToken: String, body: Array<StringValue>) {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: Map<String, String> = mapOf("authToken" to authToken)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/wordList.json/$permalink/deleteWords",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Fetches a WordList by ID
     *
     * @param permalink permalink of WordList to fetch
     * @param authToken The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
     * @return WordList
     */
    @Suppress("UNCHECKED_CAST")
    fun getWordListByPermalink(permalink: String, authToken: String): WordList {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: Map<String, String> = mapOf("authToken" to authToken)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/wordList.json/{permalink}".replace("{" + "permalink" + "}", permalink),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<WordList>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as WordList
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Fetches words in a WordList
     *
     * @param permalink ID of WordList to use
     * @param authToken The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
     * @param sortBy Field to sort by (optional, default to createDate)
     * @param sortOrder Direction to sort (optional, default to desc)
     * @param skip Results to skip (optional, default to 0)
     * @param limit Maximum number of results to return (optional, default to 100)
     * @return Array<WordListWord>
     */
    @Suppress("UNCHECKED_CAST")
    fun getWordListWords(permalink: String, authToken: String, sortBy: String, sortOrder: String, skip: Int, limit: Int): Array<WordListWord> {
        val localVariableBody: Any? = null
        val localVariableQuery: MultiValueMap = mapOf(
                "sortBy" to listOf(sortBy),
                "sortOrder" to listOf(sortOrder),
                "skip" to listOf(skip.toString()),
                "limit" to listOf(limit.toString())
        )
        val localVariableHeaders: Map<String, String> = mapOf("authToken" to authToken)
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/wordList.json/$permalink/words",
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Array<WordListWord>>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<WordListWord>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
     * Updates an existing WordList
     *
     * @param permalink permalink of WordList to update
     * @param authToken The auth token of the logged-in user, obtained by calling /account.{format}/authenticate/{username} (described above)
     * @param body Updated WordList (optional)
     * @return void
     */
    fun updateWordList(permalink: String, authToken: String, body: WordList) {
        val localVariableBody: Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: Map<String, String> = mapOf("authToken" to authToken)
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/wordList.json/{permalink}".replace("{" + "permalink" + "}", permalink),
                query = localVariableQuery,
                headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig,
                localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
